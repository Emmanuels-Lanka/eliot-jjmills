generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String               @id @default(uuid())
  name       String
  email      String               @unique
  phone      String
  role       String
  password   String
  employeeId String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  tslRecords TrafficLightSystem[]
}

model Staff {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String
  designation   String
  employeeId    String         @unique
  rfid          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gender        String
  alertLogs     AlertLog[]
  obbOperations ObbOperation[]
  accInputMan   ObbSheet[]     @relation("AccInputMan")
  fabInputMan   ObbSheet[]     @relation("FabricInputMan")
  indEngineer   ObbSheet[]     @relation("IndEngineer")
  mechanic      ObbSheet[]     @relation("Mechanic")
  qualityIns    ObbSheet[]     @relation("QI")
  supervisor1   ObbSheet[]     @relation("Supervisor1")
  supervisor2   ObbSheet[]     @relation("Supervisor2")
  staffSessions StaffSession[]
}

model Operator {
  id                       String                     @id @default(uuid())
  name                     String
  employeeId               String                     @unique
  rfid                     String?                    @unique
  gender                   String
  designation              String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isLoggedIn               Boolean                    @default(false)
  alertLogs                AlertLog[]
  operatorSessions         OperatorSession[]
  productionData           ProductionData[]
  tslRecords               TrafficLightSystem[]
  operatorNonEffectiveTime OperatorNonEffectiveTime[]
  OperatorEffectiveTimeB   OperatorEffectiveTimeB[]
}

model Unit {
  id              String           @id @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  obbSheets       ObbSheet[]
  productionLines ProductionLine[]
  sewingMachines  SewingMachine[]
}

model ProductionLine {
  id        String          @id @default(uuid())
  name      String          @unique
  unitId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  obbSheets ObbSheet[]
  unit      Unit            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  machines  SewingMachine[] @relation("ProductionLineToSewingMachine")

  @@index([unitId])
}

model EliotDevice {
  id             String           @id @default(uuid())
  isAssigned     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  installedDate  String
  modelNumber    String
  serialNumber   String           @unique
  productionData ProductionData[]
  sewingMachines SewingMachine?
}

model SewingMachine {
  id                   String               @id @default(uuid())
  brandName            String
  machineType          String
  machineId            String               @unique
  ownership            String
  isAssigned           Boolean              @default(false)
  eliotDeviceId        String?              @unique
  unitId               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  serialNumber         String               @unique
  modelNumber          String?
  activeObbOperationId String?
  alertLogs            AlertLog[]
  obbOperations        ObbOperation[]
  eliotDevice          EliotDevice?         @relation(fields: [eliotDeviceId], references: [id], onDelete: Cascade)
  unit                 Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tslRecords           TrafficLightSystem[]
  productionLines      ProductionLine[]     @relation("ProductionLineToSewingMachine")

  @@index([eliotDeviceId, unitId])
}

model ObbSheet {
  id               String         @id @default(uuid())
  name             String
  productionLineId String
  unitId           String
  indEngineerId    String?
  supervisor1Id    String?
  supervisor2Id    String?
  mechanicId       String?
  qualityInsId     String?
  accInputManId    String?
  fabInputManId    String?
  buyer            String
  style            String
  item             String
  operators        Int
  helpers          Int
  startingDate     String
  endingDate       String
  workingHours     Int
  efficiencyLevel1 Int
  efficiencyLevel2 Int
  efficiencyLevel3 Int
  itemReference    String?
  totalMP          Int?
  totalSMV         Int?
  bottleNeckTarget Int?
  target100        Int?
  ucl              Int?
  lcl              Int?
  balancingLoss    Int?
  balancingRatio   Int?
  colour           String?
  supResponseTime  Int?
  mecResponseTime  Int?
  qiResponseTime   Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(false)
  obbOperations    ObbOperation[]
  accInputMan      Staff?         @relation("AccInputMan", fields: [accInputManId], references: [id])
  fabInputMan      Staff?         @relation("FabricInputMan", fields: [fabInputManId], references: [id])
  indEngineer      Staff?         @relation("IndEngineer", fields: [indEngineerId], references: [id])
  mechanic         Staff?         @relation("Mechanic", fields: [mechanicId], references: [id])
  productionLine   ProductionLine @relation(fields: [productionLineId], references: [id], onDelete: Cascade)
  qualityIns       Staff?         @relation("QI", fields: [qualityInsId], references: [id])
  supervisor1      Staff?         @relation("Supervisor1", fields: [supervisor1Id], references: [id])
  supervisor2      Staff?         @relation("Supervisor2", fields: [supervisor2Id], references: [id])
  unit             Unit           @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([productionLineId, unitId, indEngineerId, supervisor1Id, supervisor2Id, mechanicId, qualityInsId, accInputManId, fabInputManId])
}

model Operation {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  obbOperations ObbOperation[]
}

model ObbOperation {
  id               String               @id @default(uuid())
  seqNo            Int                  @default(0)
  operationId      String
  obbSheetId       String
  smv              Int
  target           Int
  spi              Int
  length           Int
  totalStitches    Int
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  supervisorId     String?
  isActive         Boolean              @default(false)
  sewingMachineId  String?
  obbSheet         ObbSheet             @relation(fields: [obbSheetId], references: [id], onDelete: Cascade)
  operation        Operation            @relation(fields: [operationId], references: [id], onDelete: Cascade)
  sewingMachine    SewingMachine?       @relation(fields: [sewingMachineId], references: [id])
  supervisor       Staff?               @relation(fields: [supervisorId], references: [id])
  operatorSessions OperatorSession[]
  productionData   ProductionData[]
  staffSessions    StaffSession[]
  tslRecords       TrafficLightSystem[]

  @@index([operationId, obbSheetId])
}

model OperatorSession {
  id              String       @id @default(uuid())
  operatorRfid    String
  obbOperationId  String
  isLoggedIn      Boolean      @default(true)
  LoginTimestamp  String
  LogoutTimestamp String?
  createdAt       DateTime     @default(now())
  obbOperation    ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator        Operator     @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid, obbOperationId])
}

model StaffSession {
  id              String       @id @default(uuid())
  staffEmpId      String
  obbOperationId  String
  isLoggedIn      Boolean      @default(true)
  LoginTimestamp  String
  LogoutTimestamp String?
  createdAt       DateTime     @default(now())
  obbOperation    ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  staff           Staff        @relation(fields: [staffEmpId], references: [employeeId], onDelete: Cascade)

  @@index([staffEmpId, obbOperationId])
}

model ProductionData {
  id                String       @id @default(uuid())
  operatorRfid      String
  eliotSerialNumber String
  obbOperationId    String
  productionCount   Int
  timestamp         String
  createdAt         DateTime     @default(now())
  eliotDevice       EliotDevice  @relation(fields: [eliotSerialNumber], references: [serialNumber])
  obbOperation      ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator          Operator     @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid, eliotSerialNumber, obbOperationId])
}

model AlertLog {
  id              String        @id @default(uuid())
  machineId       String
  operatorRfid    String
  employeeId      String
  alertType       String
  smsStatus       String        @default("SENDING")
  emailStatus     String        @default("SENDING")
  createdAt       DateTime      @default(now())
  loginTimestamp  String?
  logoutTimestamp String?
  reqTimestamp    String
  employee        Staff         @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  sewingMachine   SewingMachine @relation(fields: [machineId], references: [machineId], onDelete: Cascade)
  operator        Operator      @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([machineId, operatorRfid, employeeId])
}

model TrafficLightSystem {
  id             String        @id @default(uuid())
  timestamp      String
  machineId      String
  operatorRfid   String
  obbOperationId String
  qcEmail        String?
  createdAt      DateTime      @default(now())
  roundNo        Int           @default(1)
  colour         String
  sewingMachine  SewingMachine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  obbOperation   ObbOperation  @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator       Operator      @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)
  qc             User?         @relation(fields: [qcEmail], references: [email])

  @@index([machineId, obbOperationId, operatorRfid])
}

model OperatorEffectiveTime {
  operatorRfid       String  @id @db.VarChar(255)
  loginTimestamp     String? @db.VarChar(255)
  logoutTimestamp    String? @db.VarChar(255)
  availableHrs       String? @db.VarChar(255)
  effectiveHrs       String? @db.VarChar(255)
  nonEffectiveHrs    String? @db.VarChar(255)
  mechanicalDowntime String? @db.VarChar(255)
  productDowntime    String? @db.VarChar(255)
  lunchBreaktime     String? @db.VarChar(255)
  offstdHrs          String? @db.VarChar(255)
}

model LunchBreaktime {
  id             Int     @id @default(autoincrement())
  status         String? @default("f") @db.VarChar(255)
  operatorRfid   String? @db.VarChar(255)
  startTimestamp String? @db.VarChar(255)
  endTimestamp   String? @db.VarChar(255)
  timeDiff       String? @db.VarChar(255)
}

model MechanicalDowntime {
  id             Int     @id @default(autoincrement())
  status         String? @default("f") @db.VarChar(255)
  operatorRfid   String? @db.VarChar(255)
  startTimestamp String? @db.VarChar(255)
  endTimestamp   String? @db.VarChar(255)
  timeDiff       String? @db.VarChar(255)
}

model NonEffective {
  id             Int     @id(map: "Offstand_pkey") @default(autoincrement())
  status         String? @default("f") @db.VarChar(255)
  operatorRfid   String? @db.VarChar(255)
  startTimestamp String? @db.VarChar(255)
  endTimestamp   String? @db.VarChar(255)
  timeDiff       String? @db.VarChar(255)
}

model OffstandTime {
  id             Int     @id @default(autoincrement())
  status         String? @default("f") @db.VarChar(255)
  operatorRfid   String? @db.VarChar(255)
  startTimestamp String? @db.VarChar(255)
  endTimestamp   String? @db.VarChar(255)
  timeDiff       String? @db.VarChar(255)
}

model ProductionDowntime {
  id             Int     @id @default(autoincrement())
  status         String? @default("f") @db.VarChar(255)
  operatorRfid   String? @db.VarChar(255)
  startTimestamp String? @db.VarChar(255)
  endTimestamp   String? @db.VarChar(255)
  timeDiff       String? @db.VarChar(255)
}

model OperatorNonEffectiveTime {
  id             String   @id @default(uuid())
  type           String
  operatorRfid   String
  startTimestamp String
  endTimestamp   String?
  timeDifference String?
  createdAt      DateTime @default(now())
  operator       Operator @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid])
}

model OperatorEffectiveTimeB {
  id                 String   @id @default(uuid())
  operatorRfid       String
  loginTimestamp     String
  logoutTimestamp    String?
  totalTime          String?
  effectiveTime      String?
  nonEffectiveTime   String?
  mechanicDownTime   String?
  productionDownTime String?
  lunchBreakTime     String?
  offStandTime       String?
  operator           Operator @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid])
}
