generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String               @id @default(uuid())
  name       String
  email      String               @unique
  phone      String
  role       String
  password   String
  employeeId String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  tslRecords TrafficLightSystem[]
}

model Staff {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  phone              String
  designation        String
  employeeId         String         @unique
  rfid               String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  gender             String
  alertLogs          AlertLog[]
  obbOperations      ObbOperation[]
  accInputMan        ObbSheet[]     @relation("AccInputMan")
  fabInputMan        ObbSheet[]     @relation("FabricInputMan")
  indEngineer        ObbSheet[]     @relation("IndEngineer")
  mechanic           ObbSheet[]     @relation("Mechanic")
  lineChief          ObbSheet[]     @relation("LineChief")
  qualityIns         ObbSheet[]     @relation("QI")
  supervisorAssembly ObbSheet[]     @relation("assembly")
  supervisorBack     ObbSheet[]     @relation("back")
  supervisorFront    ObbSheet[]     @relation("front")
  supervisorLineEnd  ObbSheet[]     @relation("line-end")
  staffSessions      StaffSession[]
}

model Operator {
  id                       String                     @id @default(uuid())
  name                     String
  employeeId               String                     @unique
  rfid                     String?                    @unique
  gender                   String
  designation              String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isLoggedIn               Boolean                    @default(false)
  alertLogs                AlertLog[]
  OperatorEffectiveTime    OperatorEffectiveTime[]
  operatorNonEffectiveTime OperatorNonEffectiveTime[]
  operatorSessions         OperatorSession[]
  productionData           ProductionData[]
  productionSMV            ProductionSMV[]
  tslRecords               TrafficLightSystem[]
  roamingQC                RoamingQC[]
}

model Unit {
  id                      String                    @id @default(uuid())
  name                    String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  obbSheets               ObbSheet[]
  productionLines         ProductionLine[]
  sewingMachines          SewingMachine[]
  lineEfficiencyResources LineEfficiencyResources[]
}

model ProductionLine {
  id        String          @id @default(uuid())
  name      String          @unique
  unitId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  obbSheets ObbSheet[]
  unit      Unit            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  machines  SewingMachine[] @relation("ProductionLineToSewingMachine")

  @@index([unitId])
}

model EliotDevice {
  id             String           @id @default(uuid())
  isAssigned     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  installedDate  String
  modelNumber    String
  serialNumber   String           @unique
  hasTrained     Boolean?         @default(false)
  productionData ProductionData[]
  sewingMachines SewingMachine?
}

model SewingMachine {
  id                   String               @id @default(uuid())
  brandName            String
  machineType          String
  machineId            String               @unique
  ownership            String
  isAssigned           Boolean              @default(false)
  eliotDeviceId        String?              @unique
  unitId               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  serialNumber         String               @unique
  modelNumber          String?
  activeObbOperationId String?
  isCombinedOperation  Boolean              @default(false)
  alertLogs            AlertLog[]
  obbOperations        ObbOperation[]
  eliotDevice          EliotDevice?         @relation(fields: [eliotDeviceId], references: [id], onDelete: Cascade)
  unit                 Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tslRecords           TrafficLightSystem[]
  productionLines      ProductionLine[]     @relation("ProductionLineToSewingMachine")
  roamingQC            RoamingQC[]

  @@index([eliotDeviceId, unitId])
}

model ObbSheet {
  id                      String                    @id @default(uuid())
  name                    String
  version                 String                    @default("1.0")
  productionLineId        String
  unitId                  String
  indEngineerId           String?
  mechanicId              String?
  qualityInsId            String?
  accInputManId           String?
  fabInputManId           String?
  buyer                   String
  style                   String
  item                    String
  operators               Int
  helpers                 Int
  startingDate            String
  endingDate              String
  workingHours            Float?
  efficiencyLevel1        Int
  efficiencyLevel2        Int
  efficiencyLevel3        Int
  bundleTime              String?
  personalAllowance       String?
  itemReference           String?
  factoryStartTime        String?
  factoryStopTime         String?
  totalMP                 Int?
  totalSMV                Float?
  obbOperationsNo         Int?
  bottleNeckTarget        Int?
  target100               Int?
  ucl                     Int?
  lcl                     Int?
  balancingLoss           Int?
  balancingRatio          Int?
  colour                  String?
  supResponseTime         Int?
  mecResponseTime         Int?
  qiResponseTime          Int?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isActive                Boolean                   @default(false)
  supervisorAssemblyId    String?
  supervisorBackId        String?
  supervisorFrontId       String?
  supervisorLineEndId     String?
  lineChiefId             String?
  obbOperations           ObbOperation[]
  lineEfficiencyResources LineEfficiencyResources[]
  accInputMan             Staff?                    @relation("AccInputMan", fields: [accInputManId], references: [id])
  fabInputMan             Staff?                    @relation("FabricInputMan", fields: [fabInputManId], references: [id])
  indEngineer             Staff?                    @relation("IndEngineer", fields: [indEngineerId], references: [id])
  mechanic                Staff?                    @relation("Mechanic", fields: [mechanicId], references: [id])
  lineChief               Staff?                    @relation("LineChief", fields: [lineChiefId], references: [id])
  productionLine          ProductionLine            @relation(fields: [productionLineId], references: [id], onDelete: Cascade)
  qualityIns              Staff?                    @relation("QI", fields: [qualityInsId], references: [id])
  supervisorAssembly      Staff?                    @relation("assembly", fields: [supervisorAssemblyId], references: [id])
  supervisorBack          Staff?                    @relation("back", fields: [supervisorBackId], references: [id])
  supervisorFront         Staff?                    @relation("front", fields: [supervisorFrontId], references: [id])
  supervisorLineEnd       Staff?                    @relation("line-end", fields: [supervisorLineEndId], references: [id])
  unit                    Unit                      @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([productionLineId, unitId, indEngineerId, supervisorFrontId, supervisorBackId, supervisorAssemblyId, supervisorLineEndId, mechanicId, qualityInsId, accInputManId, fabInputManId])
}

model Operation {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  code          String?        @unique
  obbOperations ObbOperation[]
}

model ObbOperation {
  id               String               @id @default(uuid())
  seqNo            Int                  @default(0)
  operationId      String
  obbSheetId       String
  smv              Float
  target           Int
  spi              Int
  length           Int
  totalStitches    Int
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  supervisorId     String?
  isActive         Boolean              @default(false)
  isCombined       Boolean              @default(false)
  sewingMachineId  String?
  part             String?
  obbSheet         ObbSheet             @relation(fields: [obbSheetId], references: [id], onDelete: Cascade)
  operation        Operation            @relation(fields: [operationId], references: [id], onDelete: Cascade)
  sewingMachine    SewingMachine?       @relation(fields: [sewingMachineId], references: [id])
  supervisor       Staff?               @relation(fields: [supervisorId], references: [id])
  operatorSessions OperatorSession[]
  productionData   ProductionData[]
  productionSMV    ProductionSMV[]
  staffSessions    StaffSession[]
  tslRecords       TrafficLightSystem[]
  roamingQC        RoamingQC[]

  @@index([operationId, obbSheetId])
}

model OperatorSession {
  id              String       @id @default(uuid())
  operatorRfid    String
  obbOperationId  String
  isLoggedIn      Boolean      @default(true)
  LoginTimestamp  String
  LogoutTimestamp String?
  createdAt       DateTime     @default(now())
  obbOperation    ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator        Operator     @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid, obbOperationId])
}

model StaffSession {
  id              String       @id @default(uuid())
  staffEmpId      String
  obbOperationId  String
  isLoggedIn      Boolean      @default(true)
  LoginTimestamp  String
  LogoutTimestamp String?
  createdAt       DateTime     @default(now())
  obbOperation    ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  staff           Staff        @relation(fields: [staffEmpId], references: [employeeId], onDelete: Cascade)

  @@index([staffEmpId, obbOperationId])
}

model ProductionData {
  id                String       @id @default(uuid())
  operatorRfid      String
  eliotSerialNumber String
  obbOperationId    String
  productionCount   Int
  timestamp         String
  createdAt         DateTime     @default(now())
  eliotDevice       EliotDevice  @relation(fields: [eliotSerialNumber], references: [serialNumber])
  obbOperation      ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator          Operator     @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid, eliotSerialNumber, obbOperationId])
}

model AlertLog {
  id              String        @id @default(uuid())
  machineId       String
  operatorRfid    String
  employeeId      String
  alertType       String
  smsStatus       String        @default("SENDING")
  emailStatus     String        @default("SENDING")
  createdAt       DateTime      @default(now())
  loginTimestamp  String?
  logoutTimestamp String?
  reqTimestamp    String
  employee        Staff         @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  sewingMachine   SewingMachine @relation(fields: [machineId], references: [machineId], onDelete: Cascade)
  operator        Operator      @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([machineId, operatorRfid, employeeId])
}

model TrafficLightSystem {
  id             String        @id @default(uuid())
  timestamp      String
  machineId      String
  operatorRfid   String
  obbOperationId String
  qcEmail        String?
  createdAt      DateTime      @default(now())
  roundNo        Int           @default(1)
  colour         String
  sewingMachine  SewingMachine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  obbOperation   ObbOperation  @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator       Operator      @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)
  qc             User?         @relation(fields: [qcEmail], references: [email])

  @@index([machineId, obbOperationId, operatorRfid])
}

model OperatorNonEffectiveTime {
  id             String   @id @default(uuid())
  type           String
  operatorRfid   String
  startTimestamp String
  endTimestamp   String?
  timeDifference String?
  createdAt      DateTime @default(now())
  status         Boolean  @default(false)
  operator       Operator @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid])
}

model OperatorEffectiveTime {
  id                 String   @id @default(uuid())
  operatorRfid       String
  loginTimestamp     String
  logoutTimestamp    String?
  totalTime          String?
  effectiveTime      String?
  nonEffectiveTime   String?
  mechanicDownTime   String?
  productionDownTime String?
  lunchBreakTime     String?
  offStandTime       String?
  status             String?  @db.VarChar(255)
  operator           Operator @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([operatorRfid])
}

model ProductionSMV {
  id             Int          @id @default(autoincrement())
  operatorRfid   String
  smv            String
  timestamp      String
  obbOperationId String
  obbOperation   ObbOperation @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator       Operator     @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)

  @@index([obbOperationId, operatorRfid])
}

model RoamingQC {
  id             String        @id @default(uuid())
  machineId      String
  unit           String?
  lineId         String
  obbOperationId String
  operatorRfid   String
  timestamp      String
  colorStatus    String
  inspectedQty   String
  createdAt      DateTime      @default(now())
  defects        String[]      @default([])
  obbOperation   ObbOperation  @relation(fields: [obbOperationId], references: [id], onDelete: Cascade)
  operator       Operator      @relation(fields: [operatorRfid], references: [rfid], onDelete: Cascade)
  sewingMachine  SewingMachine @relation(fields: [machineId], references: [machineId], onDelete: Cascade)

  @@index([obbOperationId, operatorRfid, machineId])
}

model LineEfficiencyResources {
  id               String   @id @default(uuid())
  sewingOperators  Int
  ironOperators    Int
  helpers          Int
  manPowers        Int
  frontQcTarget    Int
  backQcTarget     Int
  endQcTarget      Int
  workingHours     Int
  totalSMV         Float
  targetEfficiency Float
  date             String
  unitId           String
  obbSheetId       String
  unit             Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  obbSheet         ObbSheet @relation(fields: [obbSheetId], references: [id], onDelete: Cascade)

  @@index([unitId, obbSheetId])
}
