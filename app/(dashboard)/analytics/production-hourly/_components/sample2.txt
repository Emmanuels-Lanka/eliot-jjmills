"use client"

import axios from "axios";
import { useState } from "react";
import { useRouter } from "next/navigation";
import { ObbSheet } from "@prisma/client";
import { parseISO, getHours } from 'date-fns';

import HeatmapChart from "@/components/dashboard/charts/heatmap-chart";
import SelectObbSheetAndDate from "@/components/dashboard/common/select-obbsheet-and-date";
import { useToast } from "@/components/ui/use-toast";
import EffiencyHeatmap from "@/components/dashboard/charts/efficiency-heatmap";

interface AnalyticsChartProps {
    obbSheets: {
        id: string;
        name: string;
    }[] | null;
    title: string;
}

const AnalyticsChart = ({
    obbSheets,
    title
}: AnalyticsChartProps) => {
    const { toast } = useToast();
    const router = useRouter();

    const [heatmapData, setHeatmapData] = useState<HourlyEfficiencyOutputTypes[]>([]);
    const [obbSheet, setObbSheet] = useState<ObbSheet | null>(null);

    function processProductionData(productionData: ProductionDataForChartTypes[]): HourlyEfficiencyOutputTypes[] {
        // Step 1: Categorize by obbOperation
        const groupedByOperation = productionData.reduce((acc, data) => {
            (acc[data.obbOperation.id] = acc[data.obbOperation.id] || []).push(data);
            return acc;
        }, {} as Record<string, ProductionDataForChartTypes[]>);

        // Define the hourly groups
        const hourGroups = ["7:00 AM - 8:00 AM", "8:00 AM - 9:00 AM", "9:00 AM - 10:00 AM", "10:00 AM - 11:00 AM", "11:00 AM - 12:00 PM", "12:00 PM - 1:00 PM", "1:00 PM - 2:00 PM", "2:00 PM - 3:00 PM", "3:00 PM - 4:00 PM", "4:00 PM - 5:00 PM", "5:00 PM - 6:00 PM", "6:00 PM - 7:00 PM"];
        const efficiencyResults: HourlyEfficiencyOutputTypes[] = hourGroups.map(hour => ({
            hourGroup: hour,
            operation: []
        }));

        // Step 3: Categorize each operation's data by hour group
        const hourRangeStart = 7; // Start time for the first hour group

        for (const opId in groupedByOperation) {
            const operations = groupedByOperation[opId];
            const target = operations[0].obbOperation.target;

            const operationsByHour = operations.reduce((acc, item) => {
                const hour = new Date(item.timestamp).getHours();
                const index = hour - hourRangeStart;
                if (index >= 0 && index < hourGroups.length) {
                    (acc[index] = acc[index] || []).push(item);
                }
                return acc;
            }, {} as Record<number, ProductionDataForChartTypes[]>);

            // Step 4: Calculate efficiency for each hour group
            for (const hourIndex in operationsByHour) {
                const productionCountSum = operationsByHour[hourIndex].reduce((sum, curr) => sum + curr.productionCount, 0);
                const efficiency = (productionCountSum / target) * 100;

                efficiencyResults[+hourIndex].operation.push({
                    name: operations[0].obbOperation.operation.name,
                    seqNo: operations[0].obbOperation.seqNo,
                    efficiency: parseFloat(efficiency.toFixed(2))
                });
            }
        }

        // Step 5: Sort operations by seqNo for each hour
        efficiencyResults.forEach(hour => {
            hour.operation.sort((a, b) => a.seqNo - b.seqNo);
        });

        return efficiencyResults;
    }

    const handleFetchProductions = async (data: { obbSheetId: string; date: Date }) => {
        try {
            data.date.setDate(data.date.getDate() + 1);
            const formattedDate = data.date.toISOString().split('T')[0];

            const response = await axios.get(`/api/efficiency/production?obbSheetId=${data.obbSheetId}&date=${formattedDate}`);
            const heatmapData = processProductionData(response.data.data);
           

            setHeatmapData(heatmapData);
            setObbSheet(response.data.obbSheet);

            router.refresh();
        } catch (error: any) {
            console.error("Error fetching production data:", error);
            toast({
                title: "Something went wrong! Try again",
                variant: "error",
                description: (
                    <div className='mt-2 bg-slate-200 py-2 px-3 md:w-[336px] rounded-md'>
                        <code className="text-slate-800">
                            ERROR: {error.message}
                        </code>
                    </div>
                ),
            });
        }
    }

    return (
        <>
            <div className="mx-auto max-w-7xl">
                <SelectObbSheetAndDate
                    obbSheets={obbSheets}
                    handleSubmit={handleFetchProductions}
                />
            </div>
            <div className="mx-auto max-w-[1680px]">
                {heatmapData.length > 0 ?
                    <div className="mt-12">
                        <h2 className="text-lg mb-2 font-medium text-slate-700">{title}</h2>
                        <EffiencyHeatmap
                            xAxisLabel='Operations'
                            height={580}
                            efficiencyLow={obbSheet?.efficiencyLevel1}
                            efficiencyHigh={obbSheet?.efficiencyLevel3}
                            heatmapData={heatmapData}
                        />
                    </div>
                    :
                    <div className="mt-12 w-full">
                        <p className="text-center text-slate-500">Please select the OBB sheet and date ☝️</p>
                    </div>
                }
            </div>
        </>
    )
}

export default AnalyticsChart